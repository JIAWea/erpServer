// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: erp.proto

package erp

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelErp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelErp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelErp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelErpMultiError, or nil
// if none found.
func (m *ModelErp) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelErp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CorpId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ModelErpMultiError(errors)
	}

	return nil
}

// ModelErpMultiError is an error wrapping multiple validation errors returned
// by ModelErp.ValidateAll() if the designated constraints aren't met.
type ModelErpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelErpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelErpMultiError) AllErrors() []error { return m }

// ModelErpValidationError is the validation error returned by
// ModelErp.Validate if the designated constraints aren't met.
type ModelErpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelErpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelErpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelErpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelErpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelErpValidationError) ErrorName() string { return "ModelErpValidationError" }

// Error satisfies the builtin error interface
func (e ModelErpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelErp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelErpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelErpValidationError{}

// Validate checks the field values on ModelRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelRoleMultiError, or nil
// if none found.
func (m *ModelRole) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CorpId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ModelRoleMultiError(errors)
	}

	return nil
}

// ModelRoleMultiError is an error wrapping multiple validation errors returned
// by ModelRole.ValidateAll() if the designated constraints aren't met.
type ModelRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelRoleMultiError) AllErrors() []error { return m }

// ModelRoleValidationError is the validation error returned by
// ModelRole.Validate if the designated constraints aren't met.
type ModelRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelRoleValidationError) ErrorName() string { return "ModelRoleValidationError" }

// Error satisfies the builtin error interface
func (e ModelRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelRoleValidationError{}

// Validate checks the field values on CreateErpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateErpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateErpReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateErpReqMultiError, or
// nil if none found.
func (m *CreateErpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateErpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateErpReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateErpReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateErpReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateErpReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateErpReqMultiError(errors)
	}

	return nil
}

// CreateErpReqMultiError is an error wrapping multiple validation errors
// returned by CreateErpReq.ValidateAll() if the designated constraints aren't met.
type CreateErpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateErpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateErpReqMultiError) AllErrors() []error { return m }

// CreateErpReqValidationError is the validation error returned by
// CreateErpReq.Validate if the designated constraints aren't met.
type CreateErpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateErpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateErpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateErpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateErpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateErpReqValidationError) ErrorName() string { return "CreateErpReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateErpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateErpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateErpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateErpReqValidationError{}

// Validate checks the field values on CreateErpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateErpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateErpRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateErpRspMultiError, or
// nil if none found.
func (m *CreateErpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateErpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateErpRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateErpRspMultiError(errors)
	}

	return nil
}

// CreateErpRspMultiError is an error wrapping multiple validation errors
// returned by CreateErpRsp.ValidateAll() if the designated constraints aren't met.
type CreateErpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateErpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateErpRspMultiError) AllErrors() []error { return m }

// CreateErpRspValidationError is the validation error returned by
// CreateErpRsp.Validate if the designated constraints aren't met.
type CreateErpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateErpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateErpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateErpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateErpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateErpRspValidationError) ErrorName() string { return "CreateErpRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateErpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateErpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateErpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateErpRspValidationError{}

// Validate checks the field values on UpdateErpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateErpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateErpReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateErpReqMultiError, or
// nil if none found.
func (m *UpdateErpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateErpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateErpReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateErpReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateErpReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateErpReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateErpReqMultiError(errors)
	}

	return nil
}

// UpdateErpReqMultiError is an error wrapping multiple validation errors
// returned by UpdateErpReq.ValidateAll() if the designated constraints aren't met.
type UpdateErpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateErpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateErpReqMultiError) AllErrors() []error { return m }

// UpdateErpReqValidationError is the validation error returned by
// UpdateErpReq.Validate if the designated constraints aren't met.
type UpdateErpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateErpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateErpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateErpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateErpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateErpReqValidationError) ErrorName() string { return "UpdateErpReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateErpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateErpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateErpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateErpReqValidationError{}

// Validate checks the field values on UpdateErpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateErpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateErpRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateErpRspMultiError, or
// nil if none found.
func (m *UpdateErpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateErpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateErpRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateErpRspMultiError(errors)
	}

	return nil
}

// UpdateErpRspMultiError is an error wrapping multiple validation errors
// returned by UpdateErpRsp.ValidateAll() if the designated constraints aren't met.
type UpdateErpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateErpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateErpRspMultiError) AllErrors() []error { return m }

// UpdateErpRspValidationError is the validation error returned by
// UpdateErpRsp.Validate if the designated constraints aren't met.
type UpdateErpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateErpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateErpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateErpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateErpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateErpRspValidationError) ErrorName() string { return "UpdateErpRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateErpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateErpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateErpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateErpRspValidationError{}

// Validate checks the field values on DeleteErpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteErpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteErpReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteErpReqMultiError, or
// nil if none found.
func (m *DeleteErpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteErpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteErpReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteErpReqMultiError(errors)
	}

	return nil
}

// DeleteErpReqMultiError is an error wrapping multiple validation errors
// returned by DeleteErpReq.ValidateAll() if the designated constraints aren't met.
type DeleteErpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteErpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteErpReqMultiError) AllErrors() []error { return m }

// DeleteErpReqValidationError is the validation error returned by
// DeleteErpReq.Validate if the designated constraints aren't met.
type DeleteErpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteErpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteErpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteErpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteErpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteErpReqValidationError) ErrorName() string { return "DeleteErpReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteErpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteErpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteErpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteErpReqValidationError{}

// Validate checks the field values on DeleteErpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteErpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteErpRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteErpRspMultiError, or
// nil if none found.
func (m *DeleteErpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteErpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteErpRspMultiError(errors)
	}

	return nil
}

// DeleteErpRspMultiError is an error wrapping multiple validation errors
// returned by DeleteErpRsp.ValidateAll() if the designated constraints aren't met.
type DeleteErpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteErpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteErpRspMultiError) AllErrors() []error { return m }

// DeleteErpRspValidationError is the validation error returned by
// DeleteErpRsp.Validate if the designated constraints aren't met.
type DeleteErpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteErpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteErpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteErpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteErpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteErpRspValidationError) ErrorName() string { return "DeleteErpRspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteErpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteErpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteErpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteErpRspValidationError{}

// Validate checks the field values on GetErpReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetErpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetErpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetErpReqMultiError, or nil
// if none found.
func (m *GetErpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetErpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetErpReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetErpReqMultiError(errors)
	}

	return nil
}

// GetErpReqMultiError is an error wrapping multiple validation errors returned
// by GetErpReq.ValidateAll() if the designated constraints aren't met.
type GetErpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetErpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetErpReqMultiError) AllErrors() []error { return m }

// GetErpReqValidationError is the validation error returned by
// GetErpReq.Validate if the designated constraints aren't met.
type GetErpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetErpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetErpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetErpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetErpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetErpReqValidationError) ErrorName() string { return "GetErpReqValidationError" }

// Error satisfies the builtin error interface
func (e GetErpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetErpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetErpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetErpReqValidationError{}

// Validate checks the field values on GetErpRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetErpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetErpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetErpRspMultiError, or nil
// if none found.
func (m *GetErpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetErpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetErpRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetErpRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetErpRspMultiError(errors)
	}

	return nil
}

// GetErpRspMultiError is an error wrapping multiple validation errors returned
// by GetErpRsp.ValidateAll() if the designated constraints aren't met.
type GetErpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetErpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetErpRspMultiError) AllErrors() []error { return m }

// GetErpRspValidationError is the validation error returned by
// GetErpRsp.Validate if the designated constraints aren't met.
type GetErpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetErpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetErpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetErpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetErpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetErpRspValidationError) ErrorName() string { return "GetErpRspValidationError" }

// Error satisfies the builtin error interface
func (e GetErpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetErpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetErpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetErpRspValidationError{}

// Validate checks the field values on ListErpReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListErpReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListErpReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListErpReqMultiError, or
// nil if none found.
func (m *ListErpReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListErpReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListErpReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListErpReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListErpReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListErpReqMultiError(errors)
	}

	return nil
}

// ListErpReqMultiError is an error wrapping multiple validation errors
// returned by ListErpReq.ValidateAll() if the designated constraints aren't met.
type ListErpReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListErpReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListErpReqMultiError) AllErrors() []error { return m }

// ListErpReqValidationError is the validation error returned by
// ListErpReq.Validate if the designated constraints aren't met.
type ListErpReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListErpReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListErpReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListErpReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListErpReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListErpReqValidationError) ErrorName() string { return "ListErpReqValidationError" }

// Error satisfies the builtin error interface
func (e ListErpReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListErpReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListErpReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListErpReqValidationError{}

// Validate checks the field values on ListErpRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListErpRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListErpRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListErpRspMultiError, or
// nil if none found.
func (m *ListErpRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListErpRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListErpRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListErpRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListErpRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListErpRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListErpRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListErpRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListErpRspMultiError(errors)
	}

	return nil
}

// ListErpRspMultiError is an error wrapping multiple validation errors
// returned by ListErpRsp.ValidateAll() if the designated constraints aren't met.
type ListErpRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListErpRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListErpRspMultiError) AllErrors() []error { return m }

// ListErpRspValidationError is the validation error returned by
// ListErpRsp.Validate if the designated constraints aren't met.
type ListErpRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListErpRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListErpRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListErpRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListErpRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListErpRspValidationError) ErrorName() string { return "ListErpRspValidationError" }

// Error satisfies the builtin error interface
func (e ListErpRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListErpRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListErpRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListErpRspValidationError{}
