// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: erp.proto

package erp

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelUserMultiError, or nil
// if none found.
func (m *ModelUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for NickName

	// no validation rules for Password

	// no validation rules for Status

	for idx, item := range m.GetRoleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelUserValidationError{
						field:  fmt.Sprintf("RoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelUserValidationError{
						field:  fmt.Sprintf("RoleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelUserValidationError{
					field:  fmt.Sprintf("RoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsCreator

	if len(errors) > 0 {
		return ModelUserMultiError(errors)
	}

	return nil
}

// ModelUserMultiError is an error wrapping multiple validation errors returned
// by ModelUser.ValidateAll() if the designated constraints aren't met.
type ModelUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelUserMultiError) AllErrors() []error { return m }

// ModelUserValidationError is the validation error returned by
// ModelUser.Validate if the designated constraints aren't met.
type ModelUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelUserValidationError) ErrorName() string { return "ModelUserValidationError" }

// Error satisfies the builtin error interface
func (e ModelUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelUserValidationError{}

// Validate checks the field values on ModelRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelRoleMultiError, or nil
// if none found.
func (m *ModelRole) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for Status

	for idx, item := range m.GetMenuList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelRoleValidationError{
						field:  fmt.Sprintf("MenuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelRoleValidationError{
						field:  fmt.Sprintf("MenuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelRoleValidationError{
					field:  fmt.Sprintf("MenuList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ModelRoleMultiError(errors)
	}

	return nil
}

// ModelRoleMultiError is an error wrapping multiple validation errors returned
// by ModelRole.ValidateAll() if the designated constraints aren't met.
type ModelRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelRoleMultiError) AllErrors() []error { return m }

// ModelRoleValidationError is the validation error returned by
// ModelRole.Validate if the designated constraints aren't met.
type ModelRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelRoleValidationError) ErrorName() string { return "ModelRoleValidationError" }

// Error satisfies the builtin error interface
func (e ModelRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelRoleValidationError{}

// Validate checks the field values on ModelMenu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelMenu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelMenu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelMenuMultiError, or nil
// if none found.
func (m *ModelMenu) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelMenu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Redirect

	// no validation rules for Component

	// no validation rules for Sort

	// no validation rules for IsHidden

	// no validation rules for Type

	// no validation rules for ParentId

	if len(errors) > 0 {
		return ModelMenuMultiError(errors)
	}

	return nil
}

// ModelMenuMultiError is an error wrapping multiple validation errors returned
// by ModelMenu.ValidateAll() if the designated constraints aren't met.
type ModelMenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMenuMultiError) AllErrors() []error { return m }

// ModelMenuValidationError is the validation error returned by
// ModelMenu.Validate if the designated constraints aren't met.
type ModelMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelMenuValidationError) ErrorName() string { return "ModelMenuValidationError" }

// Error satisfies the builtin error interface
func (e ModelMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelMenuValidationError{}

// Validate checks the field values on ModelUserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelUserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelUserRole with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelUserRoleMultiError, or
// nil if none found.
func (m *ModelUserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelUserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for UserId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return ModelUserRoleMultiError(errors)
	}

	return nil
}

// ModelUserRoleMultiError is an error wrapping multiple validation errors
// returned by ModelUserRole.ValidateAll() if the designated constraints
// aren't met.
type ModelUserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelUserRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelUserRoleMultiError) AllErrors() []error { return m }

// ModelUserRoleValidationError is the validation error returned by
// ModelUserRole.Validate if the designated constraints aren't met.
type ModelUserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelUserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelUserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelUserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelUserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelUserRoleValidationError) ErrorName() string { return "ModelUserRoleValidationError" }

// Error satisfies the builtin error interface
func (e ModelUserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelUserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelUserRoleValidationError{}

// Validate checks the field values on ModelRoleMenu with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelRoleMenu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelRoleMenu with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelRoleMenuMultiError, or
// nil if none found.
func (m *ModelRoleMenu) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelRoleMenu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for RoleId

	// no validation rules for MenuId

	if len(errors) > 0 {
		return ModelRoleMenuMultiError(errors)
	}

	return nil
}

// ModelRoleMenuMultiError is an error wrapping multiple validation errors
// returned by ModelRoleMenu.ValidateAll() if the designated constraints
// aren't met.
type ModelRoleMenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelRoleMenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelRoleMenuMultiError) AllErrors() []error { return m }

// ModelRoleMenuValidationError is the validation error returned by
// ModelRoleMenu.Validate if the designated constraints aren't met.
type ModelRoleMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelRoleMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelRoleMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelRoleMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelRoleMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelRoleMenuValidationError) ErrorName() string { return "ModelRoleMenuValidationError" }

// Error satisfies the builtin error interface
func (e ModelRoleMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelRoleMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelRoleMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelRoleMenuValidationError{}

// Validate checks the field values on ModelAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelAccount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelAccountMultiError, or
// nil if none found.
func (m *ModelAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Name

	// no validation rules for InitialMoney

	if len(errors) > 0 {
		return ModelAccountMultiError(errors)
	}

	return nil
}

// ModelAccountMultiError is an error wrapping multiple validation errors
// returned by ModelAccount.ValidateAll() if the designated constraints aren't met.
type ModelAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelAccountMultiError) AllErrors() []error { return m }

// ModelAccountValidationError is the validation error returned by
// ModelAccount.Validate if the designated constraints aren't met.
type ModelAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelAccountValidationError) ErrorName() string { return "ModelAccountValidationError" }

// Error satisfies the builtin error interface
func (e ModelAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelAccountValidationError{}

// Validate checks the field values on ModelExpense with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelExpense) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelExpense with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelExpenseMultiError, or
// nil if none found.
func (m *ModelExpense) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelExpense) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for PayAt

	// no validation rules for Uuid

	// no validation rules for Category

	// no validation rules for Mark

	// no validation rules for PayMoney

	// no validation rules for AccountId

	// no validation rules for Ticket

	// no validation rules for HandleBy

	// no validation rules for UserId

	// no validation rules for Attachment

	// no validation rules for AttName

	if len(errors) > 0 {
		return ModelExpenseMultiError(errors)
	}

	return nil
}

// ModelExpenseMultiError is an error wrapping multiple validation errors
// returned by ModelExpense.ValidateAll() if the designated constraints aren't met.
type ModelExpenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelExpenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelExpenseMultiError) AllErrors() []error { return m }

// ModelExpenseValidationError is the validation error returned by
// ModelExpense.Validate if the designated constraints aren't met.
type ModelExpenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelExpenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelExpenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelExpenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelExpenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelExpenseValidationError) ErrorName() string { return "ModelExpenseValidationError" }

// Error satisfies the builtin error interface
func (e ModelExpenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelExpense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelExpenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelExpenseValidationError{}

// Validate checks the field values on ModelIncome with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelIncome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelIncome with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelIncomeMultiError, or
// nil if none found.
func (m *ModelIncome) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelIncome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for IncomeAt

	// no validation rules for Uuid

	// no validation rules for Category

	// no validation rules for Mark

	// no validation rules for IncomeMoney

	// no validation rules for AccountId

	// no validation rules for HandleBy

	// no validation rules for UserId

	// no validation rules for Attachment

	// no validation rules for AttName

	if len(errors) > 0 {
		return ModelIncomeMultiError(errors)
	}

	return nil
}

// ModelIncomeMultiError is an error wrapping multiple validation errors
// returned by ModelIncome.ValidateAll() if the designated constraints aren't met.
type ModelIncomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelIncomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelIncomeMultiError) AllErrors() []error { return m }

// ModelIncomeValidationError is the validation error returned by
// ModelIncome.Validate if the designated constraints aren't met.
type ModelIncomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelIncomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelIncomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelIncomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelIncomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelIncomeValidationError) ErrorName() string { return "ModelIncomeValidationError" }

// Error satisfies the builtin error interface
func (e ModelIncomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelIncome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelIncomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelIncomeValidationError{}

// Validate checks the field values on UserLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginReqMultiError, or
// nil if none found.
func (m *UserLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return UserLoginReqMultiError(errors)
	}

	return nil
}

// UserLoginReqMultiError is an error wrapping multiple validation errors
// returned by UserLoginReq.ValidateAll() if the designated constraints aren't met.
type UserLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginReqMultiError) AllErrors() []error { return m }

// UserLoginReqValidationError is the validation error returned by
// UserLoginReq.Validate if the designated constraints aren't met.
type UserLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReqValidationError) ErrorName() string { return "UserLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReqValidationError{}

// Validate checks the field values on UserLoginRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginRspMultiError, or
// nil if none found.
func (m *UserLoginRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLoginRspMultiError(errors)
	}

	return nil
}

// UserLoginRspMultiError is an error wrapping multiple validation errors
// returned by UserLoginRsp.ValidateAll() if the designated constraints aren't met.
type UserLoginRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRspMultiError) AllErrors() []error { return m }

// UserLoginRspValidationError is the validation error returned by
// UserLoginRsp.Validate if the designated constraints aren't met.
type UserLoginRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRspValidationError) ErrorName() string { return "UserLoginRspValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRspValidationError{}

// Validate checks the field values on UserLogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLogoutReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLogoutReqMultiError, or
// nil if none found.
func (m *UserLogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLogoutReqMultiError(errors)
	}

	return nil
}

// UserLogoutReqMultiError is an error wrapping multiple validation errors
// returned by UserLogoutReq.ValidateAll() if the designated constraints
// aren't met.
type UserLogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLogoutReqMultiError) AllErrors() []error { return m }

// UserLogoutReqValidationError is the validation error returned by
// UserLogoutReq.Validate if the designated constraints aren't met.
type UserLogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLogoutReqValidationError) ErrorName() string { return "UserLogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e UserLogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLogoutReqValidationError{}

// Validate checks the field values on UserLogoutRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLogoutRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLogoutRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLogoutRspMultiError, or
// nil if none found.
func (m *UserLogoutRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLogoutRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserLogoutRspMultiError(errors)
	}

	return nil
}

// UserLogoutRspMultiError is an error wrapping multiple validation errors
// returned by UserLogoutRsp.ValidateAll() if the designated constraints
// aren't met.
type UserLogoutRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLogoutRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLogoutRspMultiError) AllErrors() []error { return m }

// UserLogoutRspValidationError is the validation error returned by
// UserLogoutRsp.Validate if the designated constraints aren't met.
type UserLogoutRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLogoutRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLogoutRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLogoutRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLogoutRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLogoutRspValidationError) ErrorName() string { return "UserLogoutRspValidationError" }

// Error satisfies the builtin error interface
func (e UserLogoutRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLogoutRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLogoutRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLogoutRspValidationError{}

// Validate checks the field values on MenuTree with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuTree with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuTreeMultiError, or nil
// if none found.
func (m *MenuTree) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Icon

	// no validation rules for Path

	// no validation rules for Redirect

	// no validation rules for Component

	// no validation rules for IsHidden

	// no validation rules for ParentId

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenuTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenuTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenuTreeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MenuTreeMultiError(errors)
	}

	return nil
}

// MenuTreeMultiError is an error wrapping multiple validation errors returned
// by MenuTree.ValidateAll() if the designated constraints aren't met.
type MenuTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuTreeMultiError) AllErrors() []error { return m }

// MenuTreeValidationError is the validation error returned by
// MenuTree.Validate if the designated constraints aren't met.
type MenuTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuTreeValidationError) ErrorName() string { return "MenuTreeValidationError" }

// Error satisfies the builtin error interface
func (e MenuTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuTreeValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoRspMultiError,
// or nil if none found.
func (m *GetUserInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMenuList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserInfoRspValidationError{
						field:  fmt.Sprintf("MenuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserInfoRspValidationError{
						field:  fmt.Sprintf("MenuList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInfoRspValidationError{
					field:  fmt.Sprintf("MenuList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserInfoRspMultiError(errors)
	}

	return nil
}

// GetUserInfoRspMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoRsp.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRspMultiError) AllErrors() []error { return m }

// GetUserInfoRspValidationError is the validation error returned by
// GetUserInfoRsp.Validate if the designated constraints aren't met.
type GetUserInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRspValidationError) ErrorName() string { return "GetUserInfoRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRspValidationError{}

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserReqMultiError, or
// nil if none found.
func (m *CreateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateUserReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserReqMultiError(errors)
	}

	return nil
}

// CreateUserReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqMultiError) AllErrors() []error { return m }

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on CreateUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserRspMultiError, or
// nil if none found.
func (m *CreateUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRspMultiError(errors)
	}

	return nil
}

// CreateUserRspMultiError is an error wrapping multiple validation errors
// returned by CreateUserRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRspMultiError) AllErrors() []error { return m }

// CreateUserRspValidationError is the validation error returned by
// CreateUserRsp.Validate if the designated constraints aren't met.
type CreateUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRspValidationError) ErrorName() string { return "CreateUserRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRspValidationError{}

// Validate checks the field values on UpdateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserReqMultiError, or
// nil if none found.
func (m *UpdateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateUserReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserReqMultiError(errors)
	}

	return nil
}

// UpdateUserReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReqMultiError) AllErrors() []error { return m }

// UpdateUserReqValidationError is the validation error returned by
// UpdateUserReq.Validate if the designated constraints aren't met.
type UpdateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReqValidationError) ErrorName() string { return "UpdateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReqValidationError{}

// Validate checks the field values on UpdateUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserRspMultiError, or
// nil if none found.
func (m *UpdateUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRspMultiError(errors)
	}

	return nil
}

// UpdateUserRspMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRspMultiError) AllErrors() []error { return m }

// UpdateUserRspValidationError is the validation error returned by
// UpdateUserRsp.Validate if the designated constraints aren't met.
type UpdateUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRspValidationError) ErrorName() string { return "UpdateUserRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRspValidationError{}

// Validate checks the field values on UpdateUserRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRoleReqMultiError, or nil if none found.
func (m *UpdateUserRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateUserRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoleIdList()) < 1 {
		err := UpdateUserRoleReqValidationError{
			field:  "RoleIdList",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserRoleReqMultiError(errors)
	}

	return nil
}

// UpdateUserRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRoleReqMultiError) AllErrors() []error { return m }

// UpdateUserRoleReqValidationError is the validation error returned by
// UpdateUserRoleReq.Validate if the designated constraints aren't met.
type UpdateUserRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRoleReqValidationError) ErrorName() string {
	return "UpdateUserRoleReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRoleReqValidationError{}

// Validate checks the field values on UpdateUserRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRoleRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRoleRspMultiError, or nil if none found.
func (m *UpdateUserRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserRoleRspMultiError(errors)
	}

	return nil
}

// UpdateUserRoleRspMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRoleRspMultiError) AllErrors() []error { return m }

// UpdateUserRoleRspValidationError is the validation error returned by
// UpdateUserRoleRsp.Validate if the designated constraints aren't met.
type UpdateUserRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRoleRspValidationError) ErrorName() string {
	return "UpdateUserRoleRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRoleRspValidationError{}

// Validate checks the field values on UpdatePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReqMultiError, or nil if none found.
func (m *UpdatePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePasswordReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePasswordReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePasswordReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePasswordReqMultiError(errors)
	}

	return nil
}

// UpdatePasswordReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReqMultiError) AllErrors() []error { return m }

// UpdatePasswordReqValidationError is the validation error returned by
// UpdatePasswordReq.Validate if the designated constraints aren't met.
type UpdatePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReqValidationError) ErrorName() string {
	return "UpdatePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReqValidationError{}

// Validate checks the field values on UpdatePasswordRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRspMultiError, or nil if none found.
func (m *UpdatePasswordRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePasswordRspMultiError(errors)
	}

	return nil
}

// UpdatePasswordRspMultiError is an error wrapping multiple validation errors
// returned by UpdatePasswordRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRspMultiError) AllErrors() []error { return m }

// UpdatePasswordRspValidationError is the validation error returned by
// UpdatePasswordRsp.Validate if the designated constraints aren't met.
type UpdatePasswordRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRspValidationError) ErrorName() string {
	return "UpdatePasswordRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRspValidationError{}

// Validate checks the field values on DeleteUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserReqMultiError, or
// nil if none found.
func (m *DeleteUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIdList()) < 1 {
		err := DeleteUserReqValidationError{
			field:  "IdList",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserReqMultiError(errors)
	}

	return nil
}

// DeleteUserReqMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReqMultiError) AllErrors() []error { return m }

// DeleteUserReqValidationError is the validation error returned by
// DeleteUserReq.Validate if the designated constraints aren't met.
type DeleteUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReqValidationError) ErrorName() string { return "DeleteUserReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReqValidationError{}

// Validate checks the field values on DeleteUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserRspMultiError, or
// nil if none found.
func (m *DeleteUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserRspMultiError(errors)
	}

	return nil
}

// DeleteUserRspMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRsp.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRspMultiError) AllErrors() []error { return m }

// DeleteUserRspValidationError is the validation error returned by
// DeleteUserRsp.Validate if the designated constraints aren't met.
type DeleteUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRspValidationError) ErrorName() string { return "DeleteUserRspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRspValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetUserReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRspMultiError, or
// nil if none found.
func (m *GetUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserRspMultiError(errors)
	}

	return nil
}

// GetUserRspMultiError is an error wrapping multiple validation errors
// returned by GetUserRsp.ValidateAll() if the designated constraints aren't met.
type GetUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRspMultiError) AllErrors() []error { return m }

// GetUserRspValidationError is the validation error returned by
// GetUserRsp.Validate if the designated constraints aren't met.
type GetUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRspValidationError) ErrorName() string { return "GetUserRspValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRspValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReqMultiError, or
// nil if none found.
func (m *ListUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUserReqMultiError(errors)
	}

	return nil
}

// ListUserReqMultiError is an error wrapping multiple validation errors
// returned by ListUserReq.ValidateAll() if the designated constraints aren't met.
type ListUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReqMultiError) AllErrors() []error { return m }

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on ListUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserRspMultiError, or
// nil if none found.
func (m *ListUserRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserRspMultiError(errors)
	}

	return nil
}

// ListUserRspMultiError is an error wrapping multiple validation errors
// returned by ListUserRsp.ValidateAll() if the designated constraints aren't met.
type ListUserRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRspMultiError) AllErrors() []error { return m }

// ListUserRspValidationError is the validation error returned by
// ListUserRsp.Validate if the designated constraints aren't met.
type ListUserRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRspValidationError) ErrorName() string { return "ListUserRspValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRspValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleReqMultiError, or
// nil if none found.
func (m *CreateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateRoleReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleReqMultiError(errors)
	}

	return nil
}

// CreateRoleReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReqMultiError) AllErrors() []error { return m }

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on CreateRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleRspMultiError, or
// nil if none found.
func (m *CreateRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleRspMultiError(errors)
	}

	return nil
}

// CreateRoleRspMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRspMultiError) AllErrors() []error { return m }

// CreateRoleRspValidationError is the validation error returned by
// CreateRoleRsp.Validate if the designated constraints aren't met.
type CreateRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRspValidationError) ErrorName() string { return "CreateRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRspValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateRoleReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleRspMultiError, or
// nil if none found.
func (m *UpdateRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleRspMultiError(errors)
	}

	return nil
}

// UpdateRoleRspMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRspMultiError) AllErrors() []error { return m }

// UpdateRoleRspValidationError is the validation error returned by
// UpdateRoleRsp.Validate if the designated constraints aren't met.
type UpdateRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRspValidationError) ErrorName() string { return "UpdateRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRspValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on DeleteRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleRspMultiError, or
// nil if none found.
func (m *DeleteRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleRspMultiError(errors)
	}

	return nil
}

// DeleteRoleRspMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRsp.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRspMultiError) AllErrors() []error { return m }

// DeleteRoleRspValidationError is the validation error returned by
// DeleteRoleRsp.Validate if the designated constraints aren't met.
type DeleteRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRspValidationError) ErrorName() string { return "DeleteRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRspValidationError{}

// Validate checks the field values on GetRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleReqMultiError, or
// nil if none found.
func (m *GetRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetRoleReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleReqMultiError(errors)
	}

	return nil
}

// GetRoleReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleReq.ValidateAll() if the designated constraints aren't met.
type GetRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleReqMultiError) AllErrors() []error { return m }

// GetRoleReqValidationError is the validation error returned by
// GetRoleReq.Validate if the designated constraints aren't met.
type GetRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReqValidationError) ErrorName() string { return "GetRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReqValidationError{}

// Validate checks the field values on GetRoleRsp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRspMultiError, or
// nil if none found.
func (m *GetRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleRspMultiError(errors)
	}

	return nil
}

// GetRoleRspMultiError is an error wrapping multiple validation errors
// returned by GetRoleRsp.ValidateAll() if the designated constraints aren't met.
type GetRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRspMultiError) AllErrors() []error { return m }

// GetRoleRspValidationError is the validation error returned by
// GetRoleRsp.Validate if the designated constraints aren't met.
type GetRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRspValidationError) ErrorName() string { return "GetRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRspValidationError{}

// Validate checks the field values on ListRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRoleReqMultiError, or
// nil if none found.
func (m *ListRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRoleReqMultiError(errors)
	}

	return nil
}

// ListRoleReqMultiError is an error wrapping multiple validation errors
// returned by ListRoleReq.ValidateAll() if the designated constraints aren't met.
type ListRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleReqMultiError) AllErrors() []error { return m }

// ListRoleReqValidationError is the validation error returned by
// ListRoleReq.Validate if the designated constraints aren't met.
type ListRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleReqValidationError) ErrorName() string { return "ListRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleReqValidationError{}

// Validate checks the field values on ListRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRoleRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRoleRspMultiError, or
// nil if none found.
func (m *ListRoleRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRoleRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRoleRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRoleRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleRspMultiError(errors)
	}

	return nil
}

// ListRoleRspMultiError is an error wrapping multiple validation errors
// returned by ListRoleRsp.ValidateAll() if the designated constraints aren't met.
type ListRoleRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleRspMultiError) AllErrors() []error { return m }

// ListRoleRspValidationError is the validation error returned by
// ListRoleRsp.Validate if the designated constraints aren't met.
type ListRoleRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleRspValidationError) ErrorName() string { return "ListRoleRspValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleRspValidationError{}

// Validate checks the field values on ListMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuReqMultiError, or
// nil if none found.
func (m *ListMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMenuReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMenuReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMenuReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMenuReqMultiError(errors)
	}

	return nil
}

// ListMenuReqMultiError is an error wrapping multiple validation errors
// returned by ListMenuReq.ValidateAll() if the designated constraints aren't met.
type ListMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuReqMultiError) AllErrors() []error { return m }

// ListMenuReqValidationError is the validation error returned by
// ListMenuReq.Validate if the designated constraints aren't met.
type ListMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuReqValidationError) ErrorName() string { return "ListMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuReqValidationError{}

// Validate checks the field values on ListMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuRspMultiError, or
// nil if none found.
func (m *ListMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMenuRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMenuRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMenuRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuRspMultiError(errors)
	}

	return nil
}

// ListMenuRspMultiError is an error wrapping multiple validation errors
// returned by ListMenuRsp.ValidateAll() if the designated constraints aren't met.
type ListMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuRspMultiError) AllErrors() []error { return m }

// ListMenuRspValidationError is the validation error returned by
// ListMenuRsp.Validate if the designated constraints aren't met.
type ListMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuRspValidationError) ErrorName() string { return "ListMenuRspValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuRspValidationError{}

// Validate checks the field values on ListMenuTreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMenuTreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuTreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuTreeReqMultiError, or nil if none found.
func (m *ListMenuTreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuTreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMenuTreeReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMenuTreeReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMenuTreeReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMenuTreeReqMultiError(errors)
	}

	return nil
}

// ListMenuTreeReqMultiError is an error wrapping multiple validation errors
// returned by ListMenuTreeReq.ValidateAll() if the designated constraints
// aren't met.
type ListMenuTreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuTreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuTreeReqMultiError) AllErrors() []error { return m }

// ListMenuTreeReqValidationError is the validation error returned by
// ListMenuTreeReq.Validate if the designated constraints aren't met.
type ListMenuTreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuTreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuTreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuTreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuTreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuTreeReqValidationError) ErrorName() string { return "ListMenuTreeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuTreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuTreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuTreeReqValidationError{}

// Validate checks the field values on ListMenuTreeRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMenuTreeRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuTreeRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuTreeRspMultiError, or nil if none found.
func (m *ListMenuTreeRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuTreeRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuTreeRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuTreeRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuTreeRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuTreeRspMultiError(errors)
	}

	return nil
}

// ListMenuTreeRspMultiError is an error wrapping multiple validation errors
// returned by ListMenuTreeRsp.ValidateAll() if the designated constraints
// aren't met.
type ListMenuTreeRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuTreeRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuTreeRspMultiError) AllErrors() []error { return m }

// ListMenuTreeRspValidationError is the validation error returned by
// ListMenuTreeRsp.Validate if the designated constraints aren't met.
type ListMenuTreeRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuTreeRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuTreeRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuTreeRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuTreeRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuTreeRspValidationError) ErrorName() string { return "ListMenuTreeRspValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuTreeRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuTreeRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuTreeRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuTreeRspValidationError{}

// Validate checks the field values on GetRoleMenuIdListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdListReqMultiError, or nil if none found.
func (m *GetRoleMenuIdListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetRoleMenuIdListReqMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdListReqMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdListReq.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdListReqMultiError) AllErrors() []error { return m }

// GetRoleMenuIdListReqValidationError is the validation error returned by
// GetRoleMenuIdListReq.Validate if the designated constraints aren't met.
type GetRoleMenuIdListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdListReqValidationError) ErrorName() string {
	return "GetRoleMenuIdListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdListReqValidationError{}

// Validate checks the field values on GetRoleMenuIdListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMenuIdListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMenuIdListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMenuIdListRspMultiError, or nil if none found.
func (m *GetRoleMenuIdListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMenuIdListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoleMenuIdListRspMultiError(errors)
	}

	return nil
}

// GetRoleMenuIdListRspMultiError is an error wrapping multiple validation
// errors returned by GetRoleMenuIdListRsp.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMenuIdListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMenuIdListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMenuIdListRspMultiError) AllErrors() []error { return m }

// GetRoleMenuIdListRspValidationError is the validation error returned by
// GetRoleMenuIdListRsp.Validate if the designated constraints aren't met.
type GetRoleMenuIdListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMenuIdListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMenuIdListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMenuIdListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMenuIdListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMenuIdListRspValidationError) ErrorName() string {
	return "GetRoleMenuIdListRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMenuIdListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMenuIdListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMenuIdListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMenuIdListRspValidationError{}

// Validate checks the field values on UpdateRoleMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuReqMultiError, or nil if none found.
func (m *UpdateRoleMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateRoleMenuReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMenuIdList()) < 1 {
		err := UpdateRoleMenuReqValidationError{
			field:  "MenuIdList",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateRoleMenuReqMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuReqMultiError) AllErrors() []error { return m }

// UpdateRoleMenuReqValidationError is the validation error returned by
// UpdateRoleMenuReq.Validate if the designated constraints aren't met.
type UpdateRoleMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuReqValidationError) ErrorName() string {
	return "UpdateRoleMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuReqValidationError{}

// Validate checks the field values on UpdateRoleMenuRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleMenuRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleMenuRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleMenuRspMultiError, or nil if none found.
func (m *UpdateRoleMenuRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleMenuRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleMenuRspMultiError(errors)
	}

	return nil
}

// UpdateRoleMenuRspMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleMenuRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleMenuRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleMenuRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleMenuRspMultiError) AllErrors() []error { return m }

// UpdateRoleMenuRspValidationError is the validation error returned by
// UpdateRoleMenuRsp.Validate if the designated constraints aren't met.
type UpdateRoleMenuRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleMenuRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleMenuRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleMenuRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleMenuRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleMenuRspValidationError) ErrorName() string {
	return "UpdateRoleMenuRspValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleMenuRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleMenuRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleMenuRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleMenuRspValidationError{}

// Validate checks the field values on CreateAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountReqMultiError, or nil if none found.
func (m *CreateAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateAccountReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountReqMultiError(errors)
	}

	return nil
}

// CreateAccountReqMultiError is an error wrapping multiple validation errors
// returned by CreateAccountReq.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountReqMultiError) AllErrors() []error { return m }

// CreateAccountReqValidationError is the validation error returned by
// CreateAccountReq.Validate if the designated constraints aren't met.
type CreateAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountReqValidationError) ErrorName() string { return "CreateAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountReqValidationError{}

// Validate checks the field values on CreateAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRspMultiError, or nil if none found.
func (m *CreateAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountRspMultiError(errors)
	}

	return nil
}

// CreateAccountRspMultiError is an error wrapping multiple validation errors
// returned by CreateAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRspMultiError) AllErrors() []error { return m }

// CreateAccountRspValidationError is the validation error returned by
// CreateAccountRsp.Validate if the designated constraints aren't met.
type CreateAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRspValidationError) ErrorName() string { return "CreateAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRspValidationError{}

// Validate checks the field values on UpdateAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountReqMultiError, or nil if none found.
func (m *UpdateAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateAccountReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountReqMultiError(errors)
	}

	return nil
}

// UpdateAccountReqMultiError is an error wrapping multiple validation errors
// returned by UpdateAccountReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountReqMultiError) AllErrors() []error { return m }

// UpdateAccountReqValidationError is the validation error returned by
// UpdateAccountReq.Validate if the designated constraints aren't met.
type UpdateAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountReqValidationError) ErrorName() string { return "UpdateAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountReqValidationError{}

// Validate checks the field values on UpdateAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRspMultiError, or nil if none found.
func (m *UpdateAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountRspMultiError(errors)
	}

	return nil
}

// UpdateAccountRspMultiError is an error wrapping multiple validation errors
// returned by UpdateAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRspMultiError) AllErrors() []error { return m }

// UpdateAccountRspValidationError is the validation error returned by
// UpdateAccountRsp.Validate if the designated constraints aren't met.
type UpdateAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRspValidationError) ErrorName() string { return "UpdateAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRspValidationError{}

// Validate checks the field values on DeleteAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountReqMultiError, or nil if none found.
func (m *DeleteAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAccountReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccountReqMultiError(errors)
	}

	return nil
}

// DeleteAccountReqMultiError is an error wrapping multiple validation errors
// returned by DeleteAccountReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountReqMultiError) AllErrors() []error { return m }

// DeleteAccountReqValidationError is the validation error returned by
// DeleteAccountReq.Validate if the designated constraints aren't met.
type DeleteAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountReqValidationError) ErrorName() string { return "DeleteAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountReqValidationError{}

// Validate checks the field values on DeleteAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountRspMultiError, or nil if none found.
func (m *DeleteAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccountRspMultiError(errors)
	}

	return nil
}

// DeleteAccountRspMultiError is an error wrapping multiple validation errors
// returned by DeleteAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type DeleteAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountRspMultiError) AllErrors() []error { return m }

// DeleteAccountRspValidationError is the validation error returned by
// DeleteAccountRsp.Validate if the designated constraints aren't met.
type DeleteAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountRspValidationError) ErrorName() string { return "DeleteAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountRspValidationError{}

// Validate checks the field values on GetAccountReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAccountReqMultiError, or
// nil if none found.
func (m *GetAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAccountReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountReqMultiError(errors)
	}

	return nil
}

// GetAccountReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountReqMultiError) AllErrors() []error { return m }

// GetAccountReqValidationError is the validation error returned by
// GetAccountReq.Validate if the designated constraints aren't met.
type GetAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountReqValidationError) ErrorName() string { return "GetAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountReqValidationError{}

// Validate checks the field values on GetAccountRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAccountRspMultiError, or
// nil if none found.
func (m *GetAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountRspMultiError(errors)
	}

	return nil
}

// GetAccountRspMultiError is an error wrapping multiple validation errors
// returned by GetAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type GetAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountRspMultiError) AllErrors() []error { return m }

// GetAccountRspValidationError is the validation error returned by
// GetAccountRsp.Validate if the designated constraints aren't met.
type GetAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountRspValidationError) ErrorName() string { return "GetAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountRspValidationError{}

// Validate checks the field values on ListAccountReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountReqMultiError,
// or nil if none found.
func (m *ListAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAccountReqMultiError(errors)
	}

	return nil
}

// ListAccountReqMultiError is an error wrapping multiple validation errors
// returned by ListAccountReq.ValidateAll() if the designated constraints
// aren't met.
type ListAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountReqMultiError) AllErrors() []error { return m }

// ListAccountReqValidationError is the validation error returned by
// ListAccountReq.Validate if the designated constraints aren't met.
type ListAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountReqValidationError) ErrorName() string { return "ListAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountReqValidationError{}

// Validate checks the field values on ListAccountRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAccountRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAccountRspMultiError,
// or nil if none found.
func (m *ListAccountRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]uint64, len(m.GetAccountStat()))
		i := 0
		for key := range m.GetAccountStat() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAccountStat()[key]
			_ = val

			// no validation rules for AccountStat[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListAccountRspValidationError{
							field:  fmt.Sprintf("AccountStat[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListAccountRspValidationError{
							field:  fmt.Sprintf("AccountStat[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListAccountRspValidationError{
						field:  fmt.Sprintf("AccountStat[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListAccountRspMultiError(errors)
	}

	return nil
}

// ListAccountRspMultiError is an error wrapping multiple validation errors
// returned by ListAccountRsp.ValidateAll() if the designated constraints
// aren't met.
type ListAccountRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountRspMultiError) AllErrors() []error { return m }

// ListAccountRspValidationError is the validation error returned by
// ListAccountRsp.Validate if the designated constraints aren't met.
type ListAccountRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountRspValidationError) ErrorName() string { return "ListAccountRspValidationError" }

// Error satisfies the builtin error interface
func (e ListAccountRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountRspValidationError{}

// Validate checks the field values on ImportExpenseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportExpenseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportExpenseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportExpenseReqMultiError, or nil if none found.
func (m *ImportExpenseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportExpenseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportExpenseReqMultiError(errors)
	}

	return nil
}

// ImportExpenseReqMultiError is an error wrapping multiple validation errors
// returned by ImportExpenseReq.ValidateAll() if the designated constraints
// aren't met.
type ImportExpenseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportExpenseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportExpenseReqMultiError) AllErrors() []error { return m }

// ImportExpenseReqValidationError is the validation error returned by
// ImportExpenseReq.Validate if the designated constraints aren't met.
type ImportExpenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportExpenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportExpenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportExpenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportExpenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportExpenseReqValidationError) ErrorName() string { return "ImportExpenseReqValidationError" }

// Error satisfies the builtin error interface
func (e ImportExpenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportExpenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportExpenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportExpenseReqValidationError{}

// Validate checks the field values on ImportExpenseRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportExpenseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportExpenseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportExpenseRspMultiError, or nil if none found.
func (m *ImportExpenseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportExpenseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportExpenseRspMultiError(errors)
	}

	return nil
}

// ImportExpenseRspMultiError is an error wrapping multiple validation errors
// returned by ImportExpenseRsp.ValidateAll() if the designated constraints
// aren't met.
type ImportExpenseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportExpenseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportExpenseRspMultiError) AllErrors() []error { return m }

// ImportExpenseRspValidationError is the validation error returned by
// ImportExpenseRsp.Validate if the designated constraints aren't met.
type ImportExpenseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportExpenseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportExpenseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportExpenseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportExpenseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportExpenseRspValidationError) ErrorName() string { return "ImportExpenseRspValidationError" }

// Error satisfies the builtin error interface
func (e ImportExpenseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportExpenseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportExpenseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportExpenseRspValidationError{}

// Validate checks the field values on CreateExpenseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateExpenseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExpenseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExpenseReqMultiError, or nil if none found.
func (m *CreateExpenseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExpenseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := CreateExpenseReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExpenseReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExpenseReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExpenseReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExpenseReqMultiError(errors)
	}

	return nil
}

// CreateExpenseReqMultiError is an error wrapping multiple validation errors
// returned by CreateExpenseReq.ValidateAll() if the designated constraints
// aren't met.
type CreateExpenseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExpenseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExpenseReqMultiError) AllErrors() []error { return m }

// CreateExpenseReqValidationError is the validation error returned by
// CreateExpenseReq.Validate if the designated constraints aren't met.
type CreateExpenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExpenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExpenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExpenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExpenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExpenseReqValidationError) ErrorName() string { return "CreateExpenseReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateExpenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExpenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExpenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExpenseReqValidationError{}

// Validate checks the field values on CreateExpenseRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateExpenseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExpenseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExpenseRspMultiError, or nil if none found.
func (m *CreateExpenseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExpenseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateExpenseRspMultiError(errors)
	}

	return nil
}

// CreateExpenseRspMultiError is an error wrapping multiple validation errors
// returned by CreateExpenseRsp.ValidateAll() if the designated constraints
// aren't met.
type CreateExpenseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExpenseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExpenseRspMultiError) AllErrors() []error { return m }

// CreateExpenseRspValidationError is the validation error returned by
// CreateExpenseRsp.Validate if the designated constraints aren't met.
type CreateExpenseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExpenseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExpenseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExpenseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExpenseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExpenseRspValidationError) ErrorName() string { return "CreateExpenseRspValidationError" }

// Error satisfies the builtin error interface
func (e CreateExpenseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExpenseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExpenseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExpenseRspValidationError{}

// Validate checks the field values on UpdateExpenseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateExpenseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExpenseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExpenseReqMultiError, or nil if none found.
func (m *UpdateExpenseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExpenseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetData() == nil {
		err := UpdateExpenseReqValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExpenseReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExpenseReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExpenseReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExpenseReqMultiError(errors)
	}

	return nil
}

// UpdateExpenseReqMultiError is an error wrapping multiple validation errors
// returned by UpdateExpenseReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateExpenseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExpenseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExpenseReqMultiError) AllErrors() []error { return m }

// UpdateExpenseReqValidationError is the validation error returned by
// UpdateExpenseReq.Validate if the designated constraints aren't met.
type UpdateExpenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExpenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExpenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExpenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExpenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExpenseReqValidationError) ErrorName() string { return "UpdateExpenseReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateExpenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExpenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExpenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExpenseReqValidationError{}

// Validate checks the field values on UpdateExpenseRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateExpenseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExpenseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExpenseRspMultiError, or nil if none found.
func (m *UpdateExpenseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExpenseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExpenseRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExpenseRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExpenseRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExpenseRspMultiError(errors)
	}

	return nil
}

// UpdateExpenseRspMultiError is an error wrapping multiple validation errors
// returned by UpdateExpenseRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateExpenseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExpenseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExpenseRspMultiError) AllErrors() []error { return m }

// UpdateExpenseRspValidationError is the validation error returned by
// UpdateExpenseRsp.Validate if the designated constraints aren't met.
type UpdateExpenseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExpenseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExpenseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExpenseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExpenseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExpenseRspValidationError) ErrorName() string { return "UpdateExpenseRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateExpenseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExpenseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExpenseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExpenseRspValidationError{}

// Validate checks the field values on DeleteExpenseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteExpenseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExpenseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExpenseReqMultiError, or nil if none found.
func (m *DeleteExpenseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExpenseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIdList()) < 1 {
		err := DeleteExpenseReqValidationError{
			field:  "IdList",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteExpenseReqMultiError(errors)
	}

	return nil
}

// DeleteExpenseReqMultiError is an error wrapping multiple validation errors
// returned by DeleteExpenseReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteExpenseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExpenseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExpenseReqMultiError) AllErrors() []error { return m }

// DeleteExpenseReqValidationError is the validation error returned by
// DeleteExpenseReq.Validate if the designated constraints aren't met.
type DeleteExpenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExpenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExpenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExpenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExpenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExpenseReqValidationError) ErrorName() string { return "DeleteExpenseReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteExpenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExpenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExpenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExpenseReqValidationError{}

// Validate checks the field values on DeleteExpenseRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteExpenseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExpenseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExpenseRspMultiError, or nil if none found.
func (m *DeleteExpenseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExpenseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteExpenseRspMultiError(errors)
	}

	return nil
}

// DeleteExpenseRspMultiError is an error wrapping multiple validation errors
// returned by DeleteExpenseRsp.ValidateAll() if the designated constraints
// aren't met.
type DeleteExpenseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExpenseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExpenseRspMultiError) AllErrors() []error { return m }

// DeleteExpenseRspValidationError is the validation error returned by
// DeleteExpenseRsp.Validate if the designated constraints aren't met.
type DeleteExpenseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExpenseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExpenseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExpenseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExpenseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExpenseRspValidationError) ErrorName() string { return "DeleteExpenseRspValidationError" }

// Error satisfies the builtin error interface
func (e DeleteExpenseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExpenseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExpenseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExpenseRspValidationError{}

// Validate checks the field values on ListExpenseReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListExpenseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExpenseReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListExpenseReqMultiError,
// or nil if none found.
func (m *ListExpenseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExpenseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetListOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListExpenseReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListExpenseReqValidationError{
					field:  "ListOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetListOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListExpenseReqValidationError{
				field:  "ListOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListExpenseReqMultiError(errors)
	}

	return nil
}

// ListExpenseReqMultiError is an error wrapping multiple validation errors
// returned by ListExpenseReq.ValidateAll() if the designated constraints
// aren't met.
type ListExpenseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExpenseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExpenseReqMultiError) AllErrors() []error { return m }

// ListExpenseReqValidationError is the validation error returned by
// ListExpenseReq.Validate if the designated constraints aren't met.
type ListExpenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExpenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExpenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExpenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExpenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExpenseReqValidationError) ErrorName() string { return "ListExpenseReqValidationError" }

// Error satisfies the builtin error interface
func (e ListExpenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExpenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExpenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExpenseReqValidationError{}

// Validate checks the field values on ListExpenseRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListExpenseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExpenseRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListExpenseRspMultiError,
// or nil if none found.
func (m *ListExpenseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExpenseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaginate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListExpenseRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListExpenseRspValidationError{
					field:  "Paginate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaginate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListExpenseRspValidationError{
				field:  "Paginate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListExpenseRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListExpenseRspValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExpenseRspValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]uint64, len(m.GetAccountMap()))
		i := 0
		for key := range m.GetAccountMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAccountMap()[key]
			_ = val

			// no validation rules for AccountMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListExpenseRspValidationError{
							field:  fmt.Sprintf("AccountMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListExpenseRspValidationError{
							field:  fmt.Sprintf("AccountMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListExpenseRspValidationError{
						field:  fmt.Sprintf("AccountMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListExpenseRspMultiError(errors)
	}

	return nil
}

// ListExpenseRspMultiError is an error wrapping multiple validation errors
// returned by ListExpenseRsp.ValidateAll() if the designated constraints
// aren't met.
type ListExpenseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExpenseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExpenseRspMultiError) AllErrors() []error { return m }

// ListExpenseRspValidationError is the validation error returned by
// ListExpenseRsp.Validate if the designated constraints aren't met.
type ListExpenseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExpenseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExpenseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExpenseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExpenseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExpenseRspValidationError) ErrorName() string { return "ListExpenseRspValidationError" }

// Error satisfies the builtin error interface
func (e ListExpenseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExpenseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExpenseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExpenseRspValidationError{}

// Validate checks the field values on UpdatePasswordReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReq_DataMultiError, or nil if none found.
func (m *UpdatePasswordReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	// no validation rules for NewPasswordAgain

	if len(errors) > 0 {
		return UpdatePasswordReq_DataMultiError(errors)
	}

	return nil
}

// UpdatePasswordReq_DataMultiError is an error wrapping multiple validation
// errors returned by UpdatePasswordReq_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdatePasswordReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReq_DataMultiError) AllErrors() []error { return m }

// UpdatePasswordReq_DataValidationError is the validation error returned by
// UpdatePasswordReq_Data.Validate if the designated constraints aren't met.
type UpdatePasswordReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReq_DataValidationError) ErrorName() string {
	return "UpdatePasswordReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReq_DataValidationError{}

// Validate checks the field values on ListMenuTreeRsp_Node with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuTreeRsp_Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuTreeRsp_Node with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuTreeRsp_NodeMultiError, or nil if none found.
func (m *ListMenuTreeRsp_Node) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuTreeRsp_Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentId

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuTreeRsp_NodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuTreeRsp_NodeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuTreeRsp_NodeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuTreeRsp_NodeMultiError(errors)
	}

	return nil
}

// ListMenuTreeRsp_NodeMultiError is an error wrapping multiple validation
// errors returned by ListMenuTreeRsp_Node.ValidateAll() if the designated
// constraints aren't met.
type ListMenuTreeRsp_NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuTreeRsp_NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuTreeRsp_NodeMultiError) AllErrors() []error { return m }

// ListMenuTreeRsp_NodeValidationError is the validation error returned by
// ListMenuTreeRsp_Node.Validate if the designated constraints aren't met.
type ListMenuTreeRsp_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuTreeRsp_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuTreeRsp_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuTreeRsp_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuTreeRsp_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuTreeRsp_NodeValidationError) ErrorName() string {
	return "ListMenuTreeRsp_NodeValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuTreeRsp_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuTreeRsp_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuTreeRsp_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuTreeRsp_NodeValidationError{}

// Validate checks the field values on ListAccountRsp_AccountStat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountRsp_AccountStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountRsp_AccountStat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountRsp_AccountStatMultiError, or nil if none found.
func (m *ListAccountRsp_AccountStat) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountRsp_AccountStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalExpense

	// no validation rules for TotalIncome

	if len(errors) > 0 {
		return ListAccountRsp_AccountStatMultiError(errors)
	}

	return nil
}

// ListAccountRsp_AccountStatMultiError is an error wrapping multiple
// validation errors returned by ListAccountRsp_AccountStat.ValidateAll() if
// the designated constraints aren't met.
type ListAccountRsp_AccountStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountRsp_AccountStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountRsp_AccountStatMultiError) AllErrors() []error { return m }

// ListAccountRsp_AccountStatValidationError is the validation error returned
// by ListAccountRsp_AccountStat.Validate if the designated constraints aren't met.
type ListAccountRsp_AccountStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountRsp_AccountStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountRsp_AccountStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountRsp_AccountStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountRsp_AccountStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountRsp_AccountStatValidationError) ErrorName() string {
	return "ListAccountRsp_AccountStatValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountRsp_AccountStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountRsp_AccountStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountRsp_AccountStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountRsp_AccountStatValidationError{}
